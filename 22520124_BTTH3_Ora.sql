----------------------------------- đề 2 ----------------

alter session set "_ORACLE_SCRIPT"=true;
CREATE USER  QUANLYSINHVIEN IDENTIFIED BY admin123;
GRANT CONNECT, RESOURCE, DBA TO QUANLYSINHVIEN;

-- Sử dụng Schema
ALTER SESSION SET CURRENT_SCHEMA = QUANLYSINHVIEN;


CREATE TABLE COURSE
(
  COURSENO NUMBER PRIMARY KEY,
  DESCRIPTION NVARCHAR2(50),
  COST NUMBER,
  PREREQUISITE NUMBER,
  CREATEBY NVARCHAR2(50),
  CREATEDATE DATE,
  MODIFIEDBY NVARCHAR2(50),
  MODIFIEDDATE DATE
);


INSERT INTO COURSE (COURSENO, DESCRIPTION, COST, PREREQUISITE, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(1, 'NHẬP MÔN LẬP TRÌNH', 150, NULL, 'KHMT', TO_DATE('23/07/2023', 'DD/MM/YYYY'), NULL, NULL);
INSERT INTO COURSE (COURSENO, DESCRIPTION, COST, PREREQUISITE, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(2, 'TỔ CHỨC VÀ CẤU TRÚC MÁY TÍNH', 100, NULL, 'KTMT', TO_DATE('23/07/2023', 'DD/MM/YYYY'), NULL, NULL);
INSERT INTO COURSE (COURSENO, DESCRIPTION, COST, PREREQUISITE, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(3, 'HỆ ĐIỀU HÀNH', 200, 2, 'KTMT', TO_DATE('23/11/2023', 'DD/MM/YYYY'), NULL, NULL);
INSERT INTO COURSE (COURSENO, DESCRIPTION, COST, PREREQUISITE, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(4, 'OOP', 200, 1, 'CNPM', TO_DATE('23/11/2023', 'DD/MM/YYYY'), NULL, NULL);
INSERT INTO COURSE (COURSENO, DESCRIPTION, COST, PREREQUISITE, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(5, 'DSA', 200, 1, 'CNPM', TO_DATE('23/11/2023', 'DD/MM/YYYY'), NULL, NULL);

CREATE TABLE STUDENT
(
  STUDENTID NUMBER PRIMARY KEY,
  SALUTATION NVARCHAR2(50),
  LASTNAME NVARCHAR2(10),
  FIRSTNAME NVARCHAR2(20), 
  ADDRESS NVARCHAR2(50),
  PHONE VARCHAR2(10),
  EMPLOYER NUMBER,
  REGISTRATIONDATE DATE,
  CREATEBY NVARCHAR2(50),
  CREATEDATE DATE,
  MODIFIEDBY NVARCHAR2(50),
  MODIFIEDDATE DATE
);

INSERT INTO STUDENT (STUDENTID, SALUTATION, LASTNAME, FIRSTNAME, ADDRESS, PHONE, EMPLOYER, REGISTRATIONDATE, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(1, 'Nguyễn Văn Ân', 'Nguyễn', 'Ân', 'Cần Thơ', '0368127820', 1, TO_DATE('25/07/2023', 'DD/MM/YYYY'), NULL, NULL, NULL, NULL);
INSERT INTO STUDENT (STUDENTID, SALUTATION, LASTNAME, FIRSTNAME, ADDRESS, PHONE, EMPLOYER, REGISTRATIONDATE, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(2, 'Trần An Bình', 'Trần', 'Bình', 'Long An', '0358127897', 1, TO_DATE('25/07/2023', 'DD/MM/YYYY'), NULL, NULL, NULL, NULL);
INSERT INTO STUDENT (STUDENTID, SALUTATION, LASTNAME, FIRSTNAME, ADDRESS, PHONE, EMPLOYER, REGISTRATIONDATE, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(3, 'Vương Tuấn Khải', 'Vương', 'Khải', 'Hà Nội', '0363888321', 1, TO_DATE('25/07/2023', 'DD/MM/YYYY'), NULL, NULL, NULL, NULL);
INSERT INTO STUDENT (STUDENTID, SALUTATION, LASTNAME, FIRSTNAME, ADDRESS, PHONE, EMPLOYER, REGISTRATIONDATE, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(4, 'Lê Thị Xuân', 'Lê', 'Xuân', 'Quảng Ninh', '0388655996', 1, TO_DATE('25/07/2023', 'DD/MM/YYYY'), NULL, NULL, NULL, NULL);
INSERT INTO STUDENT (STUDENTID, SALUTATION, LASTNAME, FIRSTNAME, ADDRESS, PHONE, EMPLOYER, REGISTRATIONDATE, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(5, 'Huỳnh Phước Đạt', 'Huỳnh', 'Đạt', 'An Giang', '0368087454', 2, TO_DATE('25/07/2023', 'DD/MM/YYYY'), NULL, NULL, NULL, NULL);
INSERT INTO STUDENT (STUDENTID, SALUTATION, LASTNAME, FIRSTNAME, ADDRESS, PHONE, EMPLOYER, REGISTRATIONDATE, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(6, 'Trần Linh Đan', 'Trần', 'Đan', 'Bình Định', '0368127999', 2, TO_DATE('25/07/2023', 'DD/MM/YYYY'), NULL, NULL, NULL, NULL);
INSERT INTO STUDENT (STUDENTID, SALUTATION, LASTNAME, FIRSTNAME, ADDRESS, PHONE, EMPLOYER, REGISTRATIONDATE, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(7, 'Bùi Hải Đăng', 'Bùi', 'Đăng', 'Tây Nguyên', '0377227961', 2, TO_DATE('25/07/2023', 'DD/MM/YYYY'), NULL, NULL, NULL, NULL);
INSERT INTO STUDENT (STUDENTID, SALUTATION, LASTNAME, FIRSTNAME, ADDRESS, PHONE, EMPLOYER, REGISTRATIONDATE, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(8, 'Trương Lê Mỹ Tiên', 'Trương', 'Tiên', 'Khánh Hoà', '0368145829', 2, TO_DATE('25/07/2023', 'DD/MM/YYYY'), NULL, NULL, NULL, NULL);


CREATE TABLE CLASS
(
  CLASSID NUMBER PRIMARY KEY,
  COURSENO NUMBER,
  CLASSNO NUMBER,
  STARTDATETIME DATE,
  LOCATION VARCHAR2(20),
  INSTRUCTORID NUMBER,
  CAPACITY NUMBER,
  CREATEBY NVARCHAR2(50),
  CREATEDATE DATE,
  MODIFIEDBY NVARCHAR2(50),
  MODIFIEDDATE DATE
);

INSERT INTO CLASS (CLASSID, COURSENO, CLASSNO, STARTDATETIME, LOCATION, INSTRUCTORID, CAPACITY, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(1, 1, 1, TO_DATE('23/08/2023', 'DD/MM/YYYY'), 'B1.20', 1, 80, NULL, NULL, NULL, NULL);
INSERT INTO CLASS (CLASSID, COURSENO, CLASSNO, STARTDATETIME, LOCATION, INSTRUCTORID, CAPACITY, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(2, 2, 1, TO_DATE('23/08/2023', 'DD/MM/YYYY'), 'B3.10', 1, 80, NULL, NULL, NULL, NULL);
INSERT INTO CLASS (CLASSID, COURSENO, CLASSNO, STARTDATETIME, LOCATION, INSTRUCTORID, CAPACITY, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(3, 3, 1, TO_DATE('23/12/2023', 'DD/MM/YYYY'), 'B6.06', 1, 100, NULL, NULL, NULL, NULL);
INSERT INTO CLASS (CLASSID, COURSENO, CLASSNO, STARTDATETIME, LOCATION, INSTRUCTORID, CAPACITY, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(4, 4, 1, TO_DATE('23/12/2023', 'DD/MM/YYYY'), 'B7.02', 1, 100, NULL, NULL, NULL, NULL);
INSERT INTO CLASS (CLASSID, COURSENO, CLASSNO, STARTDATETIME, LOCATION, INSTRUCTORID, CAPACITY, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(5, 5, 1, TO_DATE('23/12/2023', 'DD/MM/YYYY'), 'B5.14', 1, 100, NULL, NULL, NULL, NULL);

CREATE TABLE ENROLLMENT
(
  STUDENTID NUMBER,
  CLASSID NUMBER,
  ENROLLDATE DATE,
  FINALGRADE NUMBER,
  CREATEBY NVARCHAR2(50),
  CREATEDATE DATE,
  MODIFIEDBY NVARCHAR2(50),
  MODIFIEDDATE DATE,
  PRIMARY KEY(STUDENTID, CLASSID)
);

INSERT INTO ENROLLMENT(STUDENTID, CLASSID, ENROLLDATE, FINALGRADE, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(1, 1, TO_DATE('23/08/2023', 'DD/MM/YYYY'), 9, NULL, NULL, NULL, NULL);
INSERT INTO ENROLLMENT(STUDENTID, CLASSID, ENROLLDATE, FINALGRADE, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(2, 1, TO_DATE('23/08/2023', 'DD/MM/YYYY'), 8, NULL, NULL, NULL, NULL);
INSERT INTO ENROLLMENT(STUDENTID, CLASSID, ENROLLDATE, FINALGRADE, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(3, 2, TO_DATE('23/08/2023', 'DD/MM/YYYY'), 10, NULL, NULL, NULL, NULL);
INSERT INTO ENROLLMENT(STUDENTID, CLASSID, ENROLLDATE, FINALGRADE, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(4, 3, TO_DATE('23/12/2023', 'DD/MM/YYYY'), 7, NULL, NULL, NULL, NULL);
INSERT INTO ENROLLMENT(STUDENTID, CLASSID, ENROLLDATE, FINALGRADE, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(5, 4, TO_DATE('23/12/2023', 'DD/MM/YYYY'), 8, NULL, NULL, NULL, NULL);
INSERT INTO ENROLLMENT(STUDENTID, CLASSID, ENROLLDATE, FINALGRADE, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(6, 4, TO_DATE('23/12/2023', 'DD/MM/YYYY'), 10, NULL, NULL, NULL, NULL);
INSERT INTO ENROLLMENT(STUDENTID, CLASSID, ENROLLDATE, FINALGRADE, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(7, 5, TO_DATE('23/12/2023', 'DD/MM/YYYY'), 9, NULL, NULL, NULL, NULL);
INSERT INTO ENROLLMENT(STUDENTID, CLASSID, ENROLLDATE, FINALGRADE, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(8, 5, TO_DATE('23/12/2023', 'DD/MM/YYYY'), 9, NULL, NULL, NULL, NULL);

CREATE TABLE INSTRUCTOR
(
  INSTRUCTORID NUMBER PRIMARY KEY,
  SALUTATION NVARCHAR2(50),
  LASTNAME NVARCHAR2(10), --HO
  FIRSTNAME NVARCHAR2(20), --TEN
  ADDRESS NVARCHAR2(50),
  PHONE VARCHAR2(10),
  CREATEBY NVARCHAR2(50),
  CREATEDATE DATE,
  MODIFIEDBY NVARCHAR2(50),
  MODIFIEDDATE DATE
);

INSERT INTO INSTRUCTOR(INSTRUCTORID, SALUTATION, LASTNAME, FIRSTNAME, ADDRESS, PHONE, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(1, 'Dương Việt Hằng', 'Dương', 'Hằng', 'Cần Thơ', '0333546125', NULL, NULL, NULL, NULL);
INSERT INTO INSTRUCTOR(INSTRUCTORID, SALUTATION, LASTNAME, FIRSTNAME, ADDRESS, PHONE, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(2, 'Nguyễn Thanh Thiện', 'Nguyễn', 'Thiện', 'Đà Nẵng', '0333549999', NULL, NULL, NULL, NULL);
INSERT INTO INSTRUCTOR(INSTRUCTORID, SALUTATION, LASTNAME, FIRSTNAME, ADDRESS, PHONE, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(3, 'Nguyễn Bích Vân', 'Nguyễn', 'Vân', 'TPHCM', '0365577749', NULL, NULL, NULL, NULL);

CREATE TABLE GRADE
(
  STUDENTID NUMBER,
  CLASSID NUMBER,
  GRADE NUMBER,
  COMMENTS NVARCHAR2(50),
  CREATEBY NVARCHAR2(50),
  CREATEDATE DATE,
  MODIFIEDBY NVARCHAR2(50),
  MODIFIEDDATE DATE,
  PRIMARY KEY(STUDENTID, CLASSID)
);

 INSERT INTO GRADE(STUDENTID, CLASSID, GRADE, COMMENTS, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(1, 1, 9, 'VERY GOOD', NULL, NULL, NULL, NULL);
INSERT INTO GRADE(STUDENTID, CLASSID, GRADE, COMMENTS, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(2, 1, 8, 'GOOD', NULL, NULL, NULL, NULL);
INSERT INTO GRADE(STUDENTID, CLASSID, GRADE, COMMENTS, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(3, 2, 10, 'EXCELLENT', NULL, NULL, NULL, NULL);
INSERT INTO GRADE(STUDENTID, CLASSID, GRADE, COMMENTS, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(4, 3, 7, 'QUITE GOOD', NULL, NULL, NULL, NULL);
INSERT INTO GRADE(STUDENTID, CLASSID, GRADE, COMMENTS, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(5, 4, 8, 'GOOD', NULL, NULL, NULL, NULL);
INSERT INTO GRADE(STUDENTID, CLASSID, GRADE, COMMENTS, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(6, 4, 10, 'EXCELLENT', NULL, NULL, NULL, NULL);
INSERT INTO GRADE(STUDENTID, CLASSID, GRADE, COMMENTS, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(7, 5, 9, 'VERY GOOD', NULL, NULL, NULL, NULL);
INSERT INTO GRADE(STUDENTID, CLASSID, GRADE, COMMENTS, CREATEBY, CREATEDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(8, 5, 9, 'VERY GOOD', NULL, NULL, NULL, NULL);


----- trigger ---
--              them    xoa   sua
-- enrollment     +      -     -(*)

CREATE OR REPLACE TRIGGER TRG_DE2
BEFORE INSERT ON ENROLLMENT
FOR EACH ROW
DECLARE
  N_SLLOP NUMBER;
BEGIN
  SELECT COUNT(*) INTO N_SLLOP FROM ENROLLMENT
  WHERE STUDENTID = :NEW.STUDENTID;

  IF N_SLLOP > 4 THEN
    RAISE_APPLICATION_ERROR(-20001, 'ERROR: SINH VIEN KHONG DUOC DK QUA 4 LOP HOC');
  ELSE
    DBMS_OUTPUT.PUT_LINE('THEM THANH CONG');
  END IF;
END;
/

----- PROCEDURE ----
CREATE OR REPLACE PROCEDURE PROCEDURE_DE2 (
  N_COURSENO IN NUMBER
)
IS
  V_DES COURSE.DESCRIPTION%TYPE;
  N_CLASSID CLASS.CLASSID%TYPE;
  N_SLSV NUMBER;

  CURSOR CUR IS
    SELECT CLASSID FROM CLASS WHERE COURSENO = N_COURSENO;
BEGIN
  SELECT DESCRIPTION INTO V_DES FROM COURSE WHERE COURSENO = N_COURSENO;

  DBMS_OUTPUT.PUT_LINE('** Mon hoc: ' || V_DES || '(MaMH: ' || N_COURSENO || ')');
  
  OPEN CUR;
    FETCH CUR INTO N_CLASSID;

    WHILE CUR%FOUND 
    LOOP   
      SELECT COUNT(*) INTO N_SLSV FROM ENROLLMENT WHERE CLASSID = N_CLASSID;
  
      DBMS_OUTPUT.PUT_LINE('------Lop: ' || N_CLASSID || ' co so luong sinh vien dang ki la: ' || N_SLSV);

      FETCH CUR INTO N_CLASSID;
    END LOOP; 

  CLOSE CUR;
END;
/

DECLARE
  N_COURSENO NUMBER := 1;
BEGIN
  PROCEDURE_DE2(N_COURSENO);
END;
/

----- FUNCTION
CREATE OR REPLACE FUNCTION Total_cost_for_student(
  N_STUID IN NUMBER
) RETURN NUMBER AS
  N_TOTAL NUMBER;
  SL NUMBER;
BEGIN
  SELECT COUNT(*) INTO SL FROM STUDENT WHERE STUDENTID = N_STUID;

  IF SL = 0 THEN
    RETURN NULL;
  END IF;

  SELECT SUM(CO.COST) INTO N_TOTAL FROM ENROLLMENT EN, CLASS CL, COURSE CO
  WHERE EN.STUDENTID = N_STUID AND CL.CLASSID = EN.CLASSID AND CL.COURSENO = CO.COURSENO;

  RETURN N_TOTAL;
END;
/

SELECT Total_cost_for_student(1) FROM STUDENT;


-------------------------------------------------------- đề 3 --------------------------------------
ALTER SESSION SET "_ORACLE_SCRIPT" = TRUE;
CREATE USER QUANLYBANHANG IDENTIFIED BY admin123;
GRANT CONNECT, RESOURCE, DBA TO QUANLYBANHANG;

ALTER SESSION SET CURRENT_SCHEMA = QUANLYBANHANG;
CREATE TABLE S_EMP
(
  ID NUMBER PRIMARY KEY,
  LAST_NAME NVARCHAR2(10),
  FIRST_NAME NVARCHAR2(30),
  USERID NUMBER,
  START_DATE DATE,
  COMMENTS NVARCHAR2(50),
  MANAGER_ID NUMBER,
  TITLE VARCHAR2(20),
  DEPT_ID NUMBER,
  SALARY NUMBER,
  COMMISSION_PCT NUMBER
);
INSERT INTO S_EMP(ID, LAST_NAME, FIRST_NAME, USERID, START_DATE, COMMENTS, MANAGER_ID, TITLE, DEPT_ID, SALARY, COMMISSION_PCT) VALUES
(1, 'Nguyễn Văn', 'An', 1, TO_DATE('21/11/2004', 'DD/MM/YYYY'), NULL, NULL, NULL, 1, 2000, 500);
INSERT INTO S_EMP(ID, LAST_NAME, FIRST_NAME, USERID, START_DATE, COMMENTS, MANAGER_ID, TITLE, DEPT_ID, SALARY, COMMISSION_PCT) VALUES
(2, 'Bùi Văn', 'Bình', 2, TO_DATE('21/11/2007', 'DD/MM/YYYY'), NULL, 1, NULL, 2, 6000000, 100);
INSERT INTO S_EMP(ID, LAST_NAME, FIRST_NAME, USERID, START_DATE, COMMENTS, MANAGER_ID, TITLE, DEPT_ID, SALARY, COMMISSION_PCT) VALUES
(3, 'Trần Văn', 'Tân', 3, TO_DATE('25/12/2008', 'DD/MM/YYYY'), NULL, 1, NULL, 3, 5000000, 80);
INSERT INTO S_EMP(ID, LAST_NAME, FIRST_NAME, USERID, START_DATE, COMMENTS, MANAGER_ID, TITLE, DEPT_ID, SALARY, COMMISSION_PCT) VALUES
(4, 'Lê Thị', 'Hân', 4, TO_DATE('01/01/2010', 'DD/MM/YYYY'), NULL, 1, NULL, 4, 5000000, 100);

CREATE TABLE S_WAREHOUSE
(
  ID NUMBER PRIMARY KEY,
  REGION_ID NUMBER,
  ADDRESS VARCHAR2(30),
  CITY VARCHAR2(30),
  STATE VARCHAR2(30),
  COUNTRY VARCHAR2(30),
  ZIP_CODE VARCHAR2(20),
  PHONE VARCHAR2(15),
  MANAGER_ID NUMBER
);
INSERT INTO S_WAREHOUSE(ID, REGION_ID, ADDRESS, CITY, STATE, COUNTRY, ZIP_CODE, PHONE, MANAGER_ID) VALUES
(1, 1, NULL, NULL, NULL, NULL, NULL, '0987543223', 1);  
INSERT INTO S_WAREHOUSE(ID, REGION_ID, ADDRESS, CITY, STATE, COUNTRY, ZIP_CODE, PHONE, MANAGER_ID) VALUES
(2, 1, NULL, NULL, NULL, NULL, NULL, '0987541111', 1);
INSERT INTO S_WAREHOUSE(ID, REGION_ID, ADDRESS, CITY, STATE, COUNTRY, ZIP_CODE, PHONE, MANAGER_ID) VALUES
(3, 1, NULL, NULL, NULL, NULL, NULL, '0987999220', 1);
INSERT INTO S_WAREHOUSE(ID, REGION_ID, ADDRESS, CITY, STATE, COUNTRY, ZIP_CODE, PHONE, MANAGER_ID) VALUES
(4, 2, NULL, NULL, NULL, NULL, NULL, '0987543288', 2);
INSERT INTO S_WAREHOUSE(ID, REGION_ID, ADDRESS, CITY, STATE, COUNTRY, ZIP_CODE, PHONE, MANAGER_ID) VALUES
(5, 2, NULL, NULL, NULL, NULL, NULL, '0987543333', 2);
INSERT INTO S_WAREHOUSE(ID, REGION_ID, ADDRESS, CITY, STATE, COUNTRY, ZIP_CODE, PHONE, MANAGER_ID) VALUES
(6, 3, NULL, NULL, NULL, NULL, NULL, '0987511122', 3);
INSERT INTO S_WAREHOUSE(ID, REGION_ID, ADDRESS, CITY, STATE, COUNTRY, ZIP_CODE, PHONE, MANAGER_ID) VALUES
(7, 1, NULL, NULL, NULL, NULL, NULL, '0987543223', 4);     
CREATE TABLE S_TITLE
(
  TITLE VARCHAR2(20) PRIMARY KEY
); 
INSERT INTO S_TITLE(TITLE) VALUES ('MANAGER');   
INSERT INTO S_TITLE(TITLE) VALUES ('SECRETARY');
INSERT INTO S_TITLE(TITLE) VALUES ('EMPLOYEE');
CREATE TABLE S_DEPT
(
  ID NUMBER PRIMARY KEY,
  NAME NVARCHAR2(20),
  REGION_ID NUMBER
);
INSERT INTO S_DEPT(ID, NAME, REGION_ID) VALUES
(1, 'DEPT_01', 1);
INSERT INTO S_DEPT(ID, NAME, REGION_ID) VALUES
(2, 'DEPT_02', 2);
INSERT INTO S_DEPT(ID, NAME, REGION_ID) VALUES
(3, 'DEPT_03', 3);
CREATE TABLE S_CUSTOMER
(
  ID NUMBER PRIMARY KEY,
  NAME VARCHAR2(20),
  PHONE VARCHAR2(15),
  ADDRESS VARCHAR2(30),
  CITY VARCHAR2(30),
  STATE VARCHAR2(30),
  COUNTRY VARCHAR2(30),
  ZIP_CODE VARCHAR2(30),
  CREDIT_RATING NUMBER,
  SALES_REP_ID NUMBER,
  REGION_ID NUMBER,
  COMMENTS VARCHAR2(30)
);
INSERT INTO S_CUSTOMER(ID, NAME, PHONE, ADDRESS, CITY, STATE, COUNTRY, ZIP_CODE, CREDIT_RATING, SALES_REP_ID, REGION_ID, COMMENTS) VALUES
(1, 'PETER', '0222333444', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL);
INSERT INTO S_CUSTOMER(ID, NAME, PHONE, ADDRESS, CITY, STATE, COUNTRY, ZIP_CODE, CREDIT_RATING, SALES_REP_ID, REGION_ID, COMMENTS) VALUES
(2, 'WILLIAM', '0555999111', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL);
INSERT INTO S_CUSTOMER(ID, NAME, PHONE, ADDRESS, CITY, STATE, COUNTRY, ZIP_CODE, CREDIT_RATING, SALES_REP_ID, REGION_ID, COMMENTS) VALUES
(3, 'ALEX', '0333888555', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL);
CREATE TABLE S_ORD
(
  ID NUMBER PRIMARY KEY,
  CUSTOMER_ID NUMBER,
  DATE_ORDERED DATE,
  DATE_SHIPPED DATE,
  SALES_REP_ID NUMBER,
  TOTAL NUMBER,
  PAYMENT_TYPE VARCHAR2(10),
  ORDER_FILLED VARCHAR2(10)
);
INSERT INTO S_ORD(ID, CUSTOMER_ID, DATE_ORDERED, DATE_SHIPPED, SALES_REP_ID, TOTAL, PAYMENT_TYPE, ORDER_FILLED) VALUES
(1, 1, TO_DATE('12/12/2022', 'DD/MM/YYYY'), TO_DATE('15/12/2022', 'DD/MM/YYYY'), NULL, 10, 'BY CASH', NULL);
INSERT INTO S_ORD(ID, CUSTOMER_ID, DATE_ORDERED, DATE_SHIPPED, SALES_REP_ID, TOTAL, PAYMENT_TYPE, ORDER_FILLED) VALUES
(2, 1, TO_DATE('03/05/2023', 'DD/MM/YYYY'), TO_DATE('10/05/2023', 'DD/MM/YYYY'), NULL, 50, 'BANKING', NULL);
INSERT INTO S_ORD(ID, CUSTOMER_ID, DATE_ORDERED, DATE_SHIPPED, SALES_REP_ID, TOTAL, PAYMENT_TYPE, ORDER_FILLED) VALUES
(3, 2, TO_DATE('01/02/2024', 'DD/MM/YYYY'), TO_DATE('19/02/2024', 'DD/MM/YYYY'), NULL, 100, 'BY CASH', NULL);
INSERT INTO S_ORD(ID, CUSTOMER_ID, DATE_ORDERED, DATE_SHIPPED, SALES_REP_ID, TOTAL, PAYMENT_TYPE, ORDER_FILLED) VALUES
(4, 3, TO_DATE('18/06/2023', 'DD/MM/YYYY'), TO_DATE('20/06/2023', 'DD/MM/YYYY'), NULL, 120, 'BY CASH', NULL);
CREATE TABLE S_ITEM
(
  ORD_ID NUMBER,
  ITEM_ID NUMBER PRIMARY KEY,
  PRODUCT_ID NUMBER,
  PRICE NUMBER,
  QUANTITY NUMBER,
  QUANTITY_SHIPPED NUMBER
);
INSERT INTO S_ITEM(ORD_ID, ITEM_ID, PRODUCT_ID, PRICE, QUANTITY, QUANTITY_SHIPPED) VALUES
(1, 1, 1, 1000000, 100, 100);
INSERT INTO S_ITEM(ORD_ID, ITEM_ID, PRODUCT_ID, PRICE, QUANTITY, QUANTITY_SHIPPED) VALUES
(2, 2, 2, 1500000, 120, 120);
INSERT INTO S_ITEM(ORD_ID, ITEM_ID, PRODUCT_ID, PRICE, QUANTITY, QUANTITY_SHIPPED) VALUES
(3, 3, 3, 500000, 50, 50);

CREATE TABLE S_PRODUCT
( 
  ID NUMBER PRIMARY KEY,
  NAME NVARCHAR2(30),
  SHORT_DESC NVARCHAR2(30),
  LONGTEXT_ID NUMBER,
  IMAGE_ID NUMBER,
  SUGGESTED_WHLSL_PRICE NUMBER,
  WHLSL_UNITS NUMBER
);
INSERT INTO S_PRODUCT(ID, NAME, SHORT_DESC, LONGTEXT_ID, IMAGE_ID, SUGGESTED_WHLSL_PRICE, WHLSL_UNITS) VALUES
(1, 'Bút chì', NULL, NULL, NULL, 1000, 100); 
INSERT INTO S_PRODUCT(ID, NAME, SHORT_DESC, LONGTEXT_ID, IMAGE_ID, SUGGESTED_WHLSL_PRICE, WHLSL_UNITS) VALUES
(2, 'Bút bi', NULL, NULL, NULL, 3000, 200);
INSERT INTO S_PRODUCT(ID, NAME, SHORT_DESC, LONGTEXT_ID, IMAGE_ID, SUGGESTED_WHLSL_PRICE, WHLSL_UNITS) VALUES
(3, 'Bút xoá', NULL, NULL, NULL, 4000, 50);

--A.1
SELECT LAST_NAME, FIRST_NAME, START_DATE FROM S_EMP 
WHERE DEPT_ID = (
  SELECT S.DEPT_ID FROM S_EMP S WHERE FIRST_NAME = 'Lan'
);

--A.2
SELECT SE.ID, LAST_NAME, FIRST_NAME, REGION_ID 
FROM S_DEPT SD, S_EMP SE
WHERE SD.ID = SE.DEPT_ID AND SE.SALARY > (SELECT AVG(SALARY) FROM S_EMP);

--A.3


DECLARE
  LUONG NUMBER;
BEGIN
  SELECT SALARY INTO LUONG FROM S_EMP 
  WHERE ID = 1;
  
  IF LUONG <= 2000 
  THEN
    UPDATE S_EMP
    SET SALARY = SALARY + 1000
    WHERE ID = 1;

    DBMS_OUTPUT.PUT_LINE('Salary updated.');
  END IF;
END;
/

-- B
--              THEM    XOA   SUA
-- S_WAREHOUSE   +       -     +(MANAGER_ID)


CREATE OR REPLACE TRIGGER TRI_DE3
BEFORE INSERT OR UPDATE ON S_WAREHOUSE
FOR EACH ROW
DECLARE
  N_SL NUMBER;
BEGIN
  SELECT COUNT(*) INTO N_SL FROM S_WAREHOUSE 
  WHERE MANAGER_ID = :NEW.MANAGER_ID;
  
  IFN_SL > 3 THEN 
    RAISE_APPLICATION_ERROR(-20001, 'ERROR: Mỗi nhân viên không được quản lý quá 3 nhà kho!');
  ELSE
    DBMS_OUTPUT.PUT_LINE('THEM THANH CONG.');
  END IF;
END;
/

--C

DECLARE
  CURSOR EMP_CUR IS SELECT LAST_NAME, FIRST_NAME, SALARY, START_DATE FROM S_EMP WHERE SALARY > 15000 AND START_DATE > TO_DATE('01/02/1988', 'DD/MM/YYYY');
  HO S_EMP.LAST_NAME%TYPE;
  TEN S_EMP.FIRST_NAME%TYPE;
  LUONG S_EMP.SALARY%TYPE;
  NGAYVAOLAM S_EMP.START_DATE%TYPE;
BEGIN
  DBMS_OUTPUT.PUT_LINE('Những nhân viên có lương lớn hơn 15000 và ngày vào làm lớn hơn 01/02/1988 là:');
  OPEN EMP_CUR;
  FETCH EMP_CUR INTO HO, TEN, LUONG, NGAYVAOLAM;
  WHILE EMP_CUR%FOUND
  LOOP
   DBMS_OUTPUT.PUT_LINE(HO || ' ' || TEN || ' có lương ' || LUONG || ' và ngày vào làm là: ' || TO_CHAR(NGAYVAOLAM, 'DD/MM/YYYY'));
   FETCH EMP_CUR INTO HO, TEN, LUONG, NGAYVAOLAM; 
  END LOOP;
  CLOSE EMP_CUR;
END;
/

-- D

CREATE OR REPLACE FUNCTION FUNC_DE3(
  ID_KH NUMBER
) RETURN NUMBER 
AS 
  TOTAL_KH NUMBER;
  SL NUMBER;
BEGIN
  SELECT COUNT(*) INTO SL FROM S_CUSTOMER WHERE ID = ID_KH;

  IF SL = 0 THEN
    -- BAO LOI
    RETURN NULL;
  END IF;

  SELECT SUM(TOTAL) INTO TOTAL_KH FROM S_ORD WHERE CUSTOMER_ID = ID_KH;

  RETURN TOTAL_KH;
END;



CREATE OR REPLACE FUNCTION Tong_Doanhso(ID_INPUT IN NUMBER)
RETURN NUMBER AS TONG_OUTPUT NUMBER; SL NUMBER;
BEGIN
  SELECT COUNT(*) INTO SL FROM S_CUSTOMER WHERE ID = ID_INPUT;
  IF (SL = 0) THEN
    DBMS_OUTPUT.PUT_LINE('NULL');
  ELSE
    SELECT SUM(TOTAL) INTO TONG_OUTPUT FROM S_ORD WHERE CUSTOMER_ID = ID_INPUT;
  END IF;
  RETURN TONG_OUTPUT;
END;
/


SELECT Tong_Doanhso(ID) FROM S_CUSTOMER;

-------------------------------DE 5--------------------------------------------
ALTER SESSION SET "_ORACLE_SCRIPT" = TRUE;
CREATE USER QLHANGTONKHO IDENTIFIED BY PASSWORD;
GRANT CONNECT, RESOURCE, DBA TO QLHANGTONKHO;

ALTER SESSION SET CURRENT_SCHEMA = QLHANGTONKHO

CREATE TABLE LOAIHANG
(
  MALH VARCHAR2 (10) PRIMARY KEY,
  TENLH NVARCHAR2(30)
);
INSERT INTO LOAIHANG(MALH, TENLH) VALUES
('LH01', 'Bình thường');
INSERT INTO LOAIHANG(MALH, TENLH) VALUES
('LH02', 'Cao cấp');
INSERT INTO LOAIHANG(MALH, TENLH) VALUES
('LH03', 'Dễ vỡ');

CREATE TABLE MATHANG
(
  MAMH VARCHAR2(10) PRIMARY KEY,
  TENMH NVARCHAR2(30),
  DMTT NUMBER,
  MALH VARCHAR2(10)
);
INSERT INTO MATHANG(MAMH, TENMH, DMTT, MALH) VALUES
('MH01', 'Tủ lạnh Toshiba', 60, 'LH01');
INSERT INTO MATHANG(MAMH, TENMH, DMTT, MALH) VALUES
('MH02', 'Ly thuỷ tinh', 100, 'LH03');
INSERT INTO MATHANG(MAMH, TENMH, DMTT, MALH) VALUES
('MH03', 'Rèm cửa', 20, 'LH02');

CREATE TABLE KHO
(
  MAKHO VARCHAR2(10) PRIMARY KEY,
  TENKHO NVARCHAR2(20),
  MALH VARCHAR2(10)
);
INSERT INTO KHO(MAKHO, TENKHO, MALH) VALUES
('MK01', 'Kho 1', 'LH01');
INSERT INTO KHO(MAKHO, TENKHO, MALH) VALUES
('MK02', 'Kho 2', 'LH02');
INSERT INTO KHO(MAKHO, TENKHO, MALH) VALUES
('MK03', 'Kho 3', 'LH03');


CREATE TABLE TON
(
  MAKHO VARCHAR2(10),
  MAMH VARCHAR2(10),
  SLTON NUMBER,
  PRIMARY KEY(MAKHO, MAMH)
);
INSERT INTO TON(MAKHO, MAMH, SLTON) VALUES
('MK01', 'MH01', 70);
INSERT INTO TON(MAKHO, MAMH, SLTON) VALUES
('MK03', 'MH02', 120);
INSERT INTO TON(MAKHO, MAMH, SLTON) VALUES
('MK02', 'MH03', 50);
INSERT INTO TON(MAKHO, MAMH, SLTON) VALUES
('MK02', 'MH01', 50);
INSERT INTO TON(MAKHO, MAMH, SLTON) VALUES
('MK02', 'MH02', 50);
/*Tạo stored procedure với tham số vào là mã kho, hãy cho biết danh sách các mã hàng, tên hàng, tên loại hàng của 
các mặt hàng có chứa trong kho đó. Viết đoạn chương trình chạy và hiển thị kết quả*/

CREATE OR REPLACE PROCEDURE indanhsachmathang(MAKHO_INPUT IN VARCHAR2) 
IS 
  V_MAMH MATHANG.MAMH%TYPE;
  V_TENMH MATHANG.TENMH%TYPE;
  V_TENLH LOAIHANG.TENLH%TYPE;
  CURSOR cursor_malh IS 
    SELECT MAMH, TENMH, TENLH 
    FROM MATHANG, LOAIHANG
    WHERE MATHANG.MALH = LOAIHANG.MALH AND MATHANG.MAMH IN (SELECT MAMH FROM TON WHERE MAKHO = MAKHO_INPUT); 
BEGIN
  DBMS_OUTPUT.PUT_LINE('Danh sách các mã hàng,tên hàng,tên loại hàng của các mặt hàng có chứa trong kho ' || MAKHO_INPUT || ' là:');
  OPEN cursor_malh;
  FETCH cursor_malh INTO V_MAMH, V_TENMH, V_TENLH;
  WHILE cursor_malh%FOUND 
  LOOP
    DBMS_OUTPUT.PUT_LINE('Mã hàng: ' || V_MAMH || ', Tên hàng: ' || V_TENMH || ', Tên loại hàng: ' || V_TENLH);
    FETCH cursor_malh INTO V_MAMH, V_TENMH, V_TENLH;
  END LOOP;
  CLOSE cursor_malh;
END;
/
DECLARE
  v_makho VARCHAR2(10):= 'MK01';
BEGIN
  indanhsachmathang(v_makho);
END;
/
/*Tạo stored procedure/function với tham số vào là mã hàng, tham số trả về là tổng số kho có chứa mã hàng này. 
Viết đoạn chương trình chạy và hiển thị kết quả. Thông tin hiển thị bao gồm: mã hàng,tên kho,tổng số kho*/

CREATE OR REPLACE FUNCTION FUNC_DE5_CAUB(
  IN_MAHANG IN MATHANG.MAMH%TYPE
) RETURN NUMBER
AS 
  N_SL NUMBER;
BEGIN
  SELECT COUNT(*) INTO N_SL FROM TON WHERE MAMH = IN_MAHANG;

  RETURN N_SL;
END;
/

DECLARE
  V_MAMH MATHANG.MAMH%TYPE := 'MH02';

  CURSOR CUR IS
    SELECT K.TENKHO FROM KHO K, TON T 
    WHERE K.MAKHO = T.MAKHO AND T.MAMH = V_MAMH;
  
  V_TENKHO KHO.TENKHO%TYPE;
BEGIN
  DBMS_OUTPUT.PUT_LINE('MA HANG: ' || V_MAMH);

  OPEN CUR;
    FETCH CUR INTO V_TENKHO;

    WHILE CUR%FOUND
    LOOP
      DBMS_OUTPUT.PUT_LINE('-- TEN KHO: ' || V_TENKHO);

      FETCH CUR INTO V_TENKHO;
    END LOOP;
  CLOSE CUR;

  DBMS_OUTPUT.PUT_LINE('* SO LUONG KHO: ' || FUNC_DE5_CAUB(V_MAMH));
END;



--- TRIGGER
          THEM    XOA   SUA
TON         +      -    +(SLTON)
MATHANG     -      -    +(DMTT)

CREATE OR REPLACE TRIGGER TRG_TON_INSERT
BEFORE INSERT OR UPDATE 
ON TON
FOR EACH ROW
DECLARE
  V_DMTT MATHANG.DMTT%TYPE;
BEGIN
  SELECT DMTT INTO V_DMTT FROM MATHANG WHERE MAMH = :NEW.MAMH;

  IF :NEW.SLTON >= V_DMTT THEN
    DBMS_OUTPUT.PUT_LINE('THEM THANH CONG');
  ELSE
    RAISE_APPLICATION_ERROR(-20001, 'Error: THEM THAT BAI!');
  END IF;
END; 

CREATE OR REPLACE TRIGGER TRG_MATHANG_UPDATE
BEFORE UPDATE
ON MATHANG
FOR EACH ROW
DECLARE
  V_SL NUMBER;
BEGIN
  SELECT COUNT(*) INTO V_SL FROM TON 
  WHERE MAMH = :NEW.MAMH AND SLTON < :NEW.DMTT;
    
  IF V_SL >= 1 THEN 
    RAISE_APPLICATION_ERROR(-20001, 'Error: SUA THAT BAI!');
  ELSE
    DBMS_OUTPUT.PUT_LINE('SUA THANH CONG');
  END IF;
END;


















/*Tạo trigger kiểm tra ràng buộc toàn vẹn: tổng số lượng tồn các mặt hàng có trong các kho 
phải lớn hơn hoặc bằng định mức tối thiểu của mặt hàng này
              thêm          xoá           sửa
MATHANG        -             -            +(DMTT)
TON            -             +            +(SLTON)
*/























CREATE OR REPLACE TRIGGER SUA_DMTT_MATHANG 
BEFORE UPDATE ON MATHANG
FOR EACH ROW
DECLARE
  TONG NUMBER;
BEGIN
  SELECT SUM(SLTON) INTO TONG FROM TON WHERE MAMH = :NEW.MAMH;
  IF(:NEW.DMTT <= TONG) THEN
    DBMS_OUTPUT.PUT_LINE('UPDATE DMTT THÀNH CÔNG!');
  ELSE
    RAISE_APPLICATION_ERROR(-20001, 'Error: tổng số lượng tồn trong các kho phải lớn hơn hoặc bằng định mức tối thiểu của của mặt hàng này!');
  END IF;
END;
/
/*
SELECT* FROM MATHANG;
SELECT* FROM TON;
--Trường hợp ko vi phạm trigger
UPDATE MATHANG SET DMTT = 30 WHERE MAMH = 'MH03';
--Trường hợp vi phạm trigger
UPDATE MATHANG SET DMTT = 60 WHERE MAMH = 'MH03';
*/

CREATE GLOBAL TEMPORARY TABLE temp_ton
(
  mamh NUMBER,
  tong_slton NUMBER
) ON COMMIT DELETE ROWS;

CREATE VIEW V_TON AS SELECT * FROM TON;

CREATE OR REPLACE TRIGGER XOA_TON_INSTEAD
INSTEAD OF DELETE ON V_TON
FOR EACH ROW
DECLARE
  N_DMTT NUMBER;
  TONG NUMBER;
BEGIN
  -- Lưu dữ liệu cần thiết vào bảng tạm trước khi xóa
  INSERT INTO temp_ton(mamh, tong_slton)
  SELECT :OLD.MAMH, SUM(SLTON)
  FROM V_TON WHERE MAMH = :OLD.MAMH GROUP BY MAMH;


 SELECT DMTT INTO N_DMTT FROM MATHANG WHERE MAMH = (SELECT mamh FROM temp_ton);
 SELECT tong_slton INTO TONG FROMtemp_ton; 

 IF(TONG < N_DMTT) THEN
    RAISE_APPLICATION_ERROR(-20001, 'Error: tổng số lượng tồn trong các kho phải lớn hơn hoặc bằng định mức tối thiểu của của mặt hàng này!');
  ELSE 
  -- Xóa bản ghi
    DELETE FROM V_TON
    WHERE ROWID = :OLD.ROWID;
    DBMS_OUTPUT.PUT_LINE('DELETE THÀNH CÔNG!');
  END IF;
END;
/

SELECT * FROM V_TON;
SELECT * FROM TON;
DELETE FROM TON WHERE MAKHO = 'MK01';
INSERT INTO TON VALUES ('MK01', 'MH01', 70);

CREATE OR REPLACE TRIGGER XOA_TON_BEFORE
BEFORE DELETE ON V_TON
FOR EACH ROW
DECLARE
  N_DMTT NUMBER;
  TONG NUMBER;
BEGIN
  SELECT DMTT INTO N_DMTT FROM MATHANG WHERE MAMH = :OLD.MAMH;

  SELECT SUM(SLTON) INTO TONG FROM V_TON WHERE MAMH = :OLD.MAMH GROUP BY MAMH;

  IF(TONG < N_DMTT) THEN
    RAISE_APPLICATION_ERROR(-20001, 'Error: tổng số lượng tồn trong các kho phải lớn hơn hoặc bằng định mức tối thiểu của của mặt hàng này!');
  ELSE
    -- Xóa bản ghi
    DELETE FROM TON
    WHERE MAMH = :OLD.MAMH;
    DBMS_OUTPUT.PUT_LINE('DELETE THÀNH CÔNG!');
  END IF;
END;
/
CREATE OR REPLACE TRIGGER XOA_TON
AFTER DELETE ON TON
FOR EACH ROW
DECLARE
  N_DMTT NUMBER;
  TONG NUMBER :=0;
  V_MAMH TON.MAMH%TYPE;
  SL TON.SLTON%TYPE;
  CURSOR CURSOR_TON IS SELECT MAMH, SLTON FROM TON;
BEGIN
  SELECT DMTT INTO N_DMTT FROM MATHANG WHERE MAMH = :OLD.MAMH;

  OPEN CURSOR_TON;
  FETCH CURSOR_TON INTO V_MAMH, SL;
  WHILE CURSOR_TON%FOUND LOOP
    IF V_MAMH = :OLD.MAMH THEN
      TONG := TONG + SL;
    END IF;
    FETCH CURSOR_TON INTO V_MAMH, SL;
  END LOOP;
  CLOSE CURSOR_TON;

  IF(TONG < N_DMTT) THEN
    RAISE_APPLICATION_ERROR(-20001, 'Error: tổng số lượng tồn trong các kho phải lớn hơn hoặc bằng định mức tối thiểu của của mặt hàng này!');
  ELSE 
    DBMS_OUTPUT.PUT_LINE('DELETE THÀNH CÔNG!');
  END IF;
END;
/

CREATE OR REPLACE TRIGGER XOA_TON
AFTER DELETE ON TON
FOR EACH ROW
DECLARE
  N_DMTT NUMBER;
  TONG NUMBER;
BEGIN
  SELECT DMTT INTO N_DMTT FROM MATHANG WHERE MAMH = :OLD.MAMH;

  SELECT SUM(SLTON) INTO TONG FROM TON WHERE MAMH = :OLD.MAMH GROUP BY MAMH;

  IF(TONG < N_DMTT) THEN
    RAISE_APPLICATION_ERROR(-20001, 'Error: tổng số lượng tồn trong các kho phải lớn hơn hoặc bằng định mức tối thiểu của của mặt hàng này!');
  ELSE 
    DBMS_OUTPUT.PUT_LINE('DELETE THÀNH CÔNG!');
  END IF;
END;
/
/*
SELECT*FROM MATHANG m
SELECT*FROM TON
DELETE FROM TON WHERE MAKHO = 'MK01';
Bị lỗi  ORA-04091: table QLHANGTONKHO.TON is mutating, trigger/function may not see it
*/
CREATE OR REPLACE TRIGGER SUA_SLTON
AFTER UPDATE ON TON
FOR EACH ROW
DECLARE
  N_DMTT NUMBER;
  TONG NUMBER;
BEGIN
  SELECT DMTT INTO N_DMTT FROM MATHANG WHERE MAMH = :NEW.MAMH;
  SELECT SUM(SLTON) INTO TONG FROM TON WHERE MAMH = :NEW.MAMH;
  IF(TONG < N_DMTT) THEN
    RAISE_APPLICATION_ERROR(-20001, 'Error: tổng số lượng tồn trong các kho phải lớn hơn hoặc bằng định mức tối thiểu của của mặt hàng này!');
  ELSE 
    DBMS_OUTPUT.PUT_LINE('UPDATE SLTON THÀNH CÔNG!');
  END IF;
END;
/
/* UPDATE TON SET SLTON = 10 WHERE MAMH = 'MH03';
Bị lỗi  ORA-04091: table QLHANGTONKHO.TON is mutating, trigger/function may not see it
*/
